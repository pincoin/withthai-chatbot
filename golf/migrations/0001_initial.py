# Generated by Django 3.1.1 on 2020-09-19 16:41

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import golf.models
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StaffRight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Staff right',
                'verbose_name_plural': 'Staff rights',
                'permissions': (('manage_booking', 'Can manage booking'), ('view_sales', 'Can view sales'), ('change_settings', 'Can change settings')),
                'managed': False,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='Area english name')),
                ('title_thai', models.CharField(max_length=255, verbose_name='Area Thai name')),
                ('title_korean', models.CharField(max_length=255, verbose_name='Area Korean name')),
                ('slug', models.SlugField(allow_unicode=True, help_text='A short label containing only letters, numbers, underscores or hyphens for URL', max_length=255, unique=True, verbose_name='Slug')),
                ('position', models.IntegerField(db_index=True, default=0, verbose_name='Position')),
            ],
            options={
                'verbose_name': 'Area',
                'verbose_name_plural': 'Areas',
            },
        ),
        migrations.CreateModel(
            name='CustomerGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='Customer group name')),
                ('category', models.IntegerField(choices=[(0, 'Member'), (1, 'Member guest'), (2, 'Visitor')], db_index=True, default=2, verbose_name='Member categories')),
                ('position', models.IntegerField(db_index=True, default=0, verbose_name='Position')),
            ],
            options={
                'verbose_name': 'Customer group',
                'verbose_name_plural': 'Customer groups',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='District English name')),
                ('title_thai', models.CharField(max_length=255, verbose_name='District Thai name')),
                ('title_korean', models.CharField(max_length=255, verbose_name='District Korean name')),
                ('slug', models.SlugField(allow_unicode=True, help_text='A short label containing only letters, numbers, underscores or hyphens for URL', max_length=255, unique=True, verbose_name='Slug')),
                ('position', models.IntegerField(db_index=True, default=0, verbose_name='Position')),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
            },
        ),
        migrations.CreateModel(
            name='GolfBookingOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('order_no', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Order no')),
                ('fullname', models.CharField(blank=True, max_length=64, verbose_name='Fullname')),
                ('round_date', models.DateField(db_index=True, verbose_name='Round date')),
                ('round_time', models.TimeField(db_index=True, verbose_name='Round time')),
                ('pax', models.IntegerField(default=1, verbose_name='PAX')),
                ('cart', models.IntegerField(default=0, verbose_name='Cart')),
                ('user_agent', models.TextField(blank=True, verbose_name='User-agent')),
                ('accept_language', models.TextField(blank=True, verbose_name='Accept-language')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('total_list_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=11, verbose_name='Total list price')),
                ('total_selling_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=11, verbose_name='Total selling price')),
                ('order_status', models.IntegerField(choices=[(0, 'Booking open'), (1, 'Booking confirmed'), (2, 'Booking offered'), (3, 'Booking accepted'), (4, 'Booking closed')], db_index=True, default=0, verbose_name='Order status')),
                ('payment_status', models.IntegerField(choices=[(0, 'Not paid'), (1, 'Paid'), (2, 'Refund requests'), (3, 'Refunded')], db_index=True, default=0, verbose_name='Payment status')),
                ('customer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='golf.customergroup', verbose_name='Customer group')),
            ],
            options={
                'verbose_name': 'Golf booking order',
                'verbose_name_plural': 'Golf booking orders',
            },
        ),
        migrations.CreateModel(
            name='GolfClub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(db_index=True, max_length=255, verbose_name='Golf club English name')),
                ('title_thai', models.CharField(db_index=True, max_length=255, verbose_name='Golf club Thai name')),
                ('slug', models.SlugField(allow_unicode=True, help_text='A short label containing only letters, numbers, underscores or hyphens for URL', max_length=255, unique=True, verbose_name='Slug')),
                ('line_bot_channel_access_token', models.CharField(blank=True, max_length=255, null=True, verbose_name='LINE bot channel access token')),
                ('line_bot_channel_secret', models.CharField(blank=True, max_length=64, null=True, verbose_name='LINE bot channel secret')),
                ('line_notify_access_token', models.CharField(blank=True, max_length=64, null=True, verbose_name='LINE notify access token')),
                ('info_flex_message', models.JSONField(blank=True, null=True, verbose_name='Course info flex message')),
                ('order_flex_message', models.JSONField(blank=True, null=True, verbose_name='Order flex message')),
                ('no_order_flex_message', models.JSONField(blank=True, null=True, verbose_name='No order flex message')),
                ('business_hour_start', models.TimeField(verbose_name='Business hour start')),
                ('business_hour_end', models.TimeField(verbose_name='Business hour end')),
                ('phone', models.CharField(blank=True, max_length=32, null=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email address')),
                ('fax', models.CharField(blank=True, max_length=16, null=True, verbose_name='Fax number')),
                ('website', models.URLField(blank=True, max_length=255, null=True, verbose_name='Website')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Golf club address')),
                ('latitude', models.DecimalField(decimal_places=7, default=0, max_digits=10, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=7, default=0, max_digits=10, verbose_name='Longitude')),
                ('hole', models.IntegerField(choices=[(0, '18 Holes'), (1, '9 Holes'), (2, '27 Holes'), (3, '36 Holes')], db_index=True, default=0, verbose_name='No. of holes')),
                ('min_pax', models.IntegerField(default=1, verbose_name='Min PAX')),
                ('max_pax', models.IntegerField(default=4, verbose_name='Max PAX')),
                ('weekdays_min_in_advance', models.IntegerField(db_index=True, default=1, verbose_name='Weekdays minimum in advance')),
                ('weekdays_max_in_advance', models.IntegerField(db_index=True, default=30, verbose_name='Weekdays maximum in advance')),
                ('weekend_min_in_advance', models.IntegerField(db_index=True, default=1, verbose_name='Weekend minimum in advance')),
                ('weekend_max_in_advance', models.IntegerField(db_index=True, default=7, verbose_name='Weekend maximum in advance')),
                ('weekend_booking_on_monday', models.BooleanField(default=False, verbose_name='Weekend booking on Monday')),
                ('multiple_booking_orders', models.PositiveIntegerField(default=1, verbose_name='Multiple booking orders')),
                ('caddie_compulsory', models.IntegerField(choices=[(0, 'Optional'), (1, 'Compulsory')], db_index=True, default=1, verbose_name='Caddie compulsory')),
                ('cart_compulsory', models.IntegerField(choices=[(0, 'Optional'), (1, 'Compulsory'), (2, 'Compulsory 2 player+'), (3, 'Compulsory 3 player+'), (4, 'Compulsory 4 player+'), (5, 'Compulsory 5 player+'), (6, 'Compulsory 6 player+')], db_index=True, default=0, verbose_name='Cart compulsory')),
                ('liff', models.JSONField(blank=True, null=True, verbose_name='LIFF')),
                ('scorecard', models.JSONField(blank=True, null=True, verbose_name='Scorecard')),
                ('working_status', models.IntegerField(choices=[(0, 'Course open'), (1, 'Course closed'), (2, 'Suspended')], db_index=True, default=0, verbose_name='Working status')),
                ('thumbnail', models.ImageField(blank=True, upload_to=golf.models.golf_club_upload_directory_path, verbose_name='Thumbnail image')),
                ('layout', models.ImageField(blank=True, upload_to=golf.models.golf_club_upload_directory_path, verbose_name='Layout image')),
                ('customer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='golf.customergroup', verbose_name='Default customer group')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.district', verbose_name='District')),
            ],
            options={
                'verbose_name': 'Golf club',
                'verbose_name_plural': 'Golf clubs',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(max_length=255, verbose_name='Holiday name')),
                ('holiday', models.DateField(db_index=True, unique=True, verbose_name='Holiday day')),
            ],
            options={
                'verbose_name': 'Holiday',
                'verbose_name_plural': 'Holidays',
            },
        ),
        migrations.CreateModel(
            name='LineUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('line_user_id', models.CharField(db_index=True, max_length=48, unique=True, verbose_name='LINE user ID')),
                ('line_display_name', models.CharField(blank=True, max_length=128, verbose_name='LINE display name')),
                ('follow_status', models.IntegerField(choices=[(0, 'Unfollow'), (1, 'Follow')], db_index=True, default=1, verbose_name='Follow status')),
                ('fullname', models.CharField(blank=True, max_length=32, verbose_name='Fullname')),
                ('phone', models.CharField(blank=True, max_length=32, null=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email address')),
                ('lang', models.CharField(choices=[('en', 'English'), ('th', 'Thai'), ('ko', 'Korean')], default='en', max_length=16, verbose_name='Language')),
            ],
            options={
                'verbose_name': 'LINE user',
                'verbose_name_plural': 'LINE users',
            },
        ),
        migrations.CreateModel(
            name='Timeslot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='Timeslot name')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Weekday'), (1, 'Weekend')], db_index=True, default=0, verbose_name='Day of week')),
                ('slot_start', models.TimeField(verbose_name='Timeslot start time')),
                ('slot_end', models.TimeField(verbose_name='Timeslot end time')),
                ('golf_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club')),
            ],
            options={
                'verbose_name': 'Timeslot',
                'verbose_name_plural': 'Timeslots',
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='Season name')),
                ('season_start', models.DateField(verbose_name='Season start date')),
                ('season_end', models.DateField(verbose_name='Season end date')),
                ('caddie_fee_list_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='Caddie fee list price')),
                ('caddie_fee_selling_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='Caddie fee selling price')),
                ('cart_fee_list_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='Cart fee list price')),
                ('cart_fee_selling_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='Cart fee selling price')),
                ('golf_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club')),
            ],
            options={
                'verbose_name': 'Season',
                'verbose_name_plural': 'Seasons',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title_english', models.CharField(max_length=255, verbose_name='Province English name')),
                ('title_thai', models.CharField(max_length=255, verbose_name='Province Thai name')),
                ('title_korean', models.CharField(max_length=255, verbose_name='Province Korean name')),
                ('slug', models.SlugField(allow_unicode=True, help_text='A short label containing only letters, numbers, underscores or hyphens for URL', max_length=255, unique=True, verbose_name='Slug')),
                ('position', models.IntegerField(db_index=True, default=0, verbose_name='Position')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.area', verbose_name='Location area')),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
            },
        ),
        migrations.CreateModel(
            name='LineUserMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_id', models.CharField(blank=True, max_length=32, null=True, verbose_name='Membership ID')),
                ('customer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.customergroup', verbose_name='Customer group')),
                ('line_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.lineuser', verbose_name='LINE user')),
            ],
            options={
                'verbose_name': 'LINE user membership',
                'verbose_name_plural': 'LINE user membership',
            },
        ),
        migrations.CreateModel(
            name='GreenFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('list_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='List price')),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='THB', max_digits=11, verbose_name='Selling price')),
                ('customer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.customergroup', verbose_name='Customer group')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.season', verbose_name='Season')),
                ('timeslot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.timeslot', verbose_name='Timeslot')),
            ],
            options={
                'verbose_name': 'Green fee',
                'verbose_name_plural': 'Green fee',
            },
        ),
        migrations.CreateModel(
            name='GolfClubStaffMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=True, verbose_name='Primary')),
                ('permission_manage_booking', models.BooleanField(default=True, verbose_name='Can manage booking')),
                ('permission_view_sales', models.BooleanField(default=False, verbose_name='Can view sales')),
                ('permission_change_settings', models.BooleanField(default=False, verbose_name='Can change settings')),
                ('golf_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Golf club staff membership',
                'verbose_name_plural': 'Golf club staff membership',
            },
        ),
        migrations.AddField(
            model_name='golfclub',
            name='staffs',
            field=models.ManyToManyField(db_index=True, through='golf.GolfClubStaffMembership', to='golf.GolfClub', verbose_name='Golf club staffs'),
        ),
        migrations.CreateModel(
            name='GolfBookingPromotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(max_length=255, verbose_name='Promotion title')),
                ('promotion_start', models.DateField(verbose_name='Promotion start date')),
                ('promotion_end', models.DateField(verbose_name='Promotion end date')),
                ('active', models.BooleanField(default=True, verbose_name='Promotion active')),
                ('condition_monday', models.BooleanField(blank=True, null=True, verbose_name='Monday condition')),
                ('condition_tuesday', models.BooleanField(blank=True, null=True, verbose_name='Tuesday condition')),
                ('condition_wednesday', models.BooleanField(blank=True, null=True, verbose_name='Wednesday condition')),
                ('condition_thursday', models.BooleanField(blank=True, null=True, verbose_name='Thursday condition')),
                ('condition_friday', models.BooleanField(blank=True, null=True, verbose_name='Friday condition')),
                ('condition_saturday', models.BooleanField(blank=True, null=True, verbose_name='Saturday condition')),
                ('condition_sunday', models.BooleanField(blank=True, null=True, verbose_name='Sunday condition')),
                ('condition_holiday', models.BooleanField(blank=True, null=True, verbose_name='Holiday condition')),
                ('condition_time_start', models.TimeField(blank=True, null=True, verbose_name='Time start condition')),
                ('condition_time_end', models.TimeField(blank=True, null=True, verbose_name='Time end condition')),
                ('condition_pax', models.IntegerField(blank=True, null=True, verbose_name='PAX condition')),
                ('condition_cart', models.IntegerField(blank=True, null=True, verbose_name='Cart condition')),
                ('discount_fee', models.IntegerField(choices=[(0, 'Green fee'), (1, 'Caddie fee'), (2, 'Cart fee'), (3, 'Total amount')], db_index=True, default=0, verbose_name='Discount fee')),
                ('discount_method', models.IntegerField(choices=[(0, 'Percent'), (1, 'Minus'), (2, 'Assign')], db_index=True, default=0, verbose_name='Discount method')),
                ('discount_amount', models.DecimalField(decimal_places=7, default=0, max_digits=10, verbose_name='Discount amount')),
                ('banner', models.ImageField(blank=True, upload_to=golf.models.promotion_upload_directory_path, verbose_name='Promotion banner image')),
                ('condition_customer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='golf.customergroup', verbose_name='Customer group condition')),
                ('golf_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club')),
            ],
            options={
                'verbose_name': 'Golf booking promotion',
                'verbose_name_plural': 'Golf booking promotions',
            },
        ),
        migrations.CreateModel(
            name='GolfBookingOrderStatusLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('order_status', models.IntegerField(choices=[(0, 'Booking open'), (1, 'Booking confirmed'), (2, 'Booking offered'), (3, 'Booking accepted'), (4, 'Booking closed')], db_index=True, default=0, verbose_name='Order status')),
                ('payment_status', models.IntegerField(choices=[(0, 'Not paid'), (1, 'Paid'), (2, 'Refund requests'), (3, 'Refunded')], db_index=True, default=0, verbose_name='Payment status')),
                ('message', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfbookingorder', verbose_name='Golf booking order')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Golf booking order status log',
                'verbose_name_plural': 'Golf booking order status logs',
            },
        ),
        migrations.CreateModel(
            name='GolfBookingOrderProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('product', models.IntegerField(choices=[(0, 'Green fee'), (1, 'Caddie fee'), (2, 'Cart fee')], db_index=True, default=0, verbose_name='Product')),
                ('list_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=11, verbose_name='List price')),
                ('selling_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=11, verbose_name='Selling price')),
                ('quantity', models.IntegerField(default=0, verbose_name='Quantity')),
                ('customer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.customergroup', verbose_name='Customer group')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfbookingorder', verbose_name='Golf booking order')),
            ],
            options={
                'verbose_name': 'Golf booking order product',
                'verbose_name_plural': 'Golf booking order products',
            },
        ),
        migrations.AddField(
            model_name='golfbookingorder',
            name='golf_club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club'),
        ),
        migrations.AddField(
            model_name='golfbookingorder',
            name='line_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='golf.lineuser', verbose_name='LINE user'),
        ),
        migrations.AddField(
            model_name='golfbookingorder',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='golf.golfbookingorder', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='golfbookingorder',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='district',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.province', verbose_name='Province'),
        ),
        migrations.AddField(
            model_name='customergroup',
            name='golf_club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club'),
        ),
        migrations.AddField(
            model_name='customergroup',
            name='line_users',
            field=models.ManyToManyField(db_index=True, through='golf.LineUserMembership', to='golf.CustomerGroup', verbose_name='LINE users'),
        ),
        migrations.CreateModel(
            name='LiffApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('app_id', models.CharField(db_index=True, max_length=48, unique=True, verbose_name='LIFF ID')),
                ('title', models.CharField(max_length=255, verbose_name='LIFF title')),
                ('end_point_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='Endpoint URL')),
                ('golf_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golf.golfclub', verbose_name='Golf club')),
            ],
            options={
                'verbose_name': 'LIFF app',
                'verbose_name_plural': 'LIFF apps',
                'unique_together': {('golf_club', 'title')},
            },
        ),
    ]
